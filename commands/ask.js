const { EmbedBuilder } = require("discord.js");
const { SlashCommandBuilder } = require("@discordjs/builders");
const { Configuration, OpenAIApi } = require("openai");

/* Ask GPT-3 
TODO: Add try/catch block
*/

// OpenAI API Initialization
const configuration = new Configuration({
	apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

module.exports = {
	data: new SlashCommandBuilder()
		.setName("ask")
		.setDescription("Ask a question about Drexel!")
		.addStringOption((option) =>
			option
				.setName("question")
				.setDescription("Ask a question about Drexel!")
				.setRequired(true)
		)
		.setDMPermission(false),
	async execute(interaction) {
		// Check if user is verified in database
		const userRef = interaction.client.db
			.collection("users")
			.doc(interaction.user.id);
		const userDoc = await userRef.get();
		const userData = userDoc.data();
		if (userDoc.exists && userData.is_verified === true) {
			await interaction.deferReply({ ephemeral: false });

			const completition = await openai.createChatCompletion({
				model: "gpt-4-turbo-preview",
				messages: [
					{
						role: "system",
						content:
							"If no context given, you are knowledgeable about Drexel University. Answer concisely under 3 sentences.",
					},
					{
						role: "user",
						content: interaction.options.getString("question"),
					},
				],
				max_tokens: 100,
				user: interaction.user.id,
			});

			const newEmbed = new EmbedBuilder()
				.setTitle("DragonGPT")
				.addFields(
                    {
                        name: "Question",
                        value: interaction.options.getString("question"),
                    },
                    {
                        name: "Answer",
                        value: completition.data.choices[0].message.content,
                    }
                )
				.setFooter({ text: "Responses are generated by GPT-4 and may not be accurate." })
				.setTimestamp();

			await interaction
				.editReply({ embeds: [newEmbed], ephemeral: false })
				.catch((error) => {
					console.error(error);
				});
		} else {
			// User is not verified
			interaction.reply({
				content: "You must be verified to use the /ask command",
				ephemeral: true,
			});
		}
	},
};
